{- |
  Разбавление контекстов, оно же отношение подпоследовательности над контекстами.

  Контексты можно представить как списки, содержащие информацию обо всех
  свободных переменных в терме. Так как эта информация равномощна 1, мы
  можем вместо списка использовать его длину (@List () ~ Nat@).

  Т.е., контекст - это количество связанных переменных в терме.
-}
module Thin
  ( -- * Типы
    type (<=) (..)
  , Below
  , -- * Смарт-конструкторы
    none
  , every
  , -- * Композиция
    o
  , -- * Функтор
    Thinning (thin)
  ) where

import Nat

{- |
  Доказательство того, что @m@ это разбавленный контекст @n@.

  Можно представить как битовую маску длины @m@ в которой есть @n@ единиц.

  Конструктор `Empty` соответствует пустой маске.

  Конструктор `Drop` сообветствует присоединению бита @0@ к маске слева.

  Конструктор `Keep` сообветствует присоединению бита @1@ к маске слева.
-}
data (<=) n m where
  Empty ::           O   <= O    -- ^ Пустой контекст разбавляется себя
  Drop  :: n <= m -> n   <= S m  -- ^ Добавление переменной
  Keep  :: n <= m -> S n <= S m  -- ^ Перенос переменной

{- |
  Композиция разбавлений.
-}
o :: n <= m -> m <= o -> n <= o
Empty   `o` Empty   = Empty
nm      `o` Drop mo = Drop (nm `o` mo)
Drop nm `o` Keep mo = Drop (nm `o` mo)
Keep nm `o` Keep mo = Keep (nm `o` mo)

{- |
  Подтип масок, в которых ровно 1 единица.

  Проще говоря, выборка ровно 1 элемента из контекста длины @m@.

  Ну, или ссылка на этот элемент.
-}
type Below m = S O <= m

{- |
  Пустая выборка из контекста, все нули.
-}
none :: forall n. KnownNat n => O <= n
none = case natS @n of
  NatO -> Empty
  NatS -> Drop none

{- |
  Полная выборка из контекста, все единицы.
-}
every :: forall n. KnownNat n => n <= n
every = case natS @n of
  NatO -> Empty
  NatS -> Keep every

{- |
  "Разбавляемость" конструкции @p@.

  Позволяет заменить контекст @as@ у @p as@ на разбавленный @bs@, при
  предоставлении доказателства, что @as@ разбавляет @bs@ - @as <= bs@.
-}
class Thinning p where
  thin :: as <= bs -> p as -> p bs